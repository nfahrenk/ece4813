import pymysql
import json
import urllib
from copy import deepcopy
rds_host  = "ece4813-project-rds.cvei3yvcg2ng.us-east-2.rds.amazonaws.com"
db_username = "root"
db_password = "password"
db_name = "DBPROJECT"

FILTERS = [
    "from_sus_score",
    "to_sus_score",
    # "from_date",
    # "to_date",
    "ip_address",
    "domain",
    "av_detec"
]

PAGE_SIZE = 10

def transform_filter(filter_name, value):
    corrected_value = '"%s"' % value if isinstance(value, basestring) else str(value)
    if filter_name.startswith('from_'):
        return filter_name[5:] + ' >= ' + corrected_value
    elif filter_name.startswith('to_'):
        return filter_name[3:] + ' <= ' + corrected_value
    else:
        return filter_name + ' = ' + corrected_value

def get_prev_page(params):
    if 'page' in params and params['page'] > 1:
        params['page'] -= 1
        return '/malware/?' + urllib.urlencode(params)
    else:
        return None

def get_next_page(params, num_results):
    num_pages = 1 + num_results / PAGE_SIZE
    if 'page' in params and params['page'] < num_pages:
        params['page'] += 1
        return '/malware/?' + urllib.urlencode(params)
    elif 'page' not in params:
        params['page'] = 2
        return '/malware/?' + urllib.urlencode(params)
    else:
        return None

def lambda_handler(event, context):
    conn = pymysql.connect(rds_host, user=db_username, passwd=db_password, db=db_name, port=3306, connect_timeout=15)
    cursor = conn.cursor()
    page = event["query"].get("page", 1)
    offset = (page - 1) * PAGE_SIZE
    filters = [
        transform_filter(querystring, event["query"][querystring])
        for querystring in FILTERS
        if querystring in event["query"]
    ]
    query = "SELECT %s FROM Malware"
    if filters:
        query += " WHERE " + " AND ".join(filters)
    cursor.execute(query % "COUNT(sha256)")
    num_results = cursor.fetchall()[0][0]
    query += " LIMIT %d OFFSET %d" % (PAGE_SIZE, offset)    
    cursor.execute(query % "*")
    rows = cursor.fetchall()
    filtered_malware = [
        {
            'sha256': item[0],
            'file_type': item[1],
            'ingest_date': item[2], 
            'file_name': item[3],
            'sus_score': item[4],
            'sources': item[5],
            'packing': item[6],
            'av_detec': item[7],
            'domains': item[8],
            'ip_address': item[9]
        }
        for item in rows
    ]
    response = {
        'results': filtered_malware,
        'next_page': get_next_page(deepcopy(event["query"]), num_results),
        'prev_page': get_prev_page(deepcopy(event["query"]))
    }
    # print json.dumps(response)
    return response

# if __name__ == '__main__':
#     event = {'query': {'from_sus_score': 5.0, 'to_sus_score': 5.5, 'page': 2}}
#     lambda_handler(event, None)